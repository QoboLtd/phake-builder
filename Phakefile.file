<?php
require_once 'vendor/autoload.php';

// Filesystem related tasks
group('file', function() {

	desc('Process template file');
	task('process', ':builder:init', function ($app) {
		printSeparator();
		printInfo('Processing template');

		$src = requireValue('TEMPLATE_SRC', $app);
		$dst = requireValue('TEMPLATE_DST', $app);

		if (!file_exists($src)) {
			throw new \RuntimeException("Template file [$src] does not exist");
		}
		if (!is_file($src)) {
			throw new \RuntimeException("Template file [$src] is not a file");
		}
		if (!is_readable($src)) {
			throw new \RuntimeException("Template file [$src] is not readable");
		}

		$src = file_get_contents($src);

		$pattern = new \Qobo\Pattern\Pattern($src);
		$placeholders = $pattern->getPlaceholders();
		if (empty($placeholders)) {
			printWarning("Template file [$src] has no placeholders");
		}
		else {
			$data = array();
			foreach ($placeholders as $placeholder) {
				$data[$placeholder] = getValue($placeholder, $app);
			}
		}

		$bytes = file_put_contents($dst, $pattern->parse($data));
		if (!$bytes) {
			throw new \RuntimeException("Failed to write to template destination [$dst]");
		}
	});
	
	desc('Create empty file or update timestamp of existing');
	task('touch', ':builder:init', function($app) {
		printSeparator();
		printInfo("Touching file");
		
		$file = requireValue('TOUCH_PATH', $app);
		$result = touch($file);
		if (!$result) {
			throw new \RuntimeException("Failed to touch file");
		}
	});
	
	desc('Create symbolic link');
	task('link', ':builder:init', function($app) {
		printSeparator();
		printInfo("Creating link");
		$src = requireValue('LINK_SRC', $app);
		$dst = requireValue('LINK_DST', $app);
		$result = symlink($src, $dst);
		if (!$result) {
			throw new \RuntimeException("Failed to create symbolic link");
		}
	});
	
	desc('Recursively remove file or folder');
	task('rm', ':builder:init', function($app) {
		printSeparator();
		printInfo("Removing file or folder");
		$path = requireValue('RM_PATH', $app);
		if (is_dir($path)) {
			# Thanks to: http://stackoverflow.com/a/15111679/151647
			$it = new \RecursiveIteratorIterator(
				new \RecursiveDirectoryIterator(
					$path, 
					\FilesystemIterator::SKIP_DOTS
				), 
				\RecursiveIteratorIterator::CHILD_FIRST
			);
			foreach($it as $item) {
				$item->isDir() ? rmdir($item->getPathname()) : unlink($item->getPathname());
			}
			$result = rmdir($path);	
		}
		else {
			$result = unlink($path);
		}
		if (!$result) {
			throw new \RuntimeException("Failed to remove path");
		}
		
	});
	
	desc('Create folder');
	task('mkdir', ':builder:init', function($app) {
		printSeparator();
		printInfo("Creating folder");
		$path = requireValue('MKDIR_PATH', $app);
		$mode = requireValue('MKDIR_MODE', $app);
		$result = mkdir($path, $mode, true);
		if (!$result) {
			throw new \RuntimeException("Failed to create directory");
		}
	});

});

# vi:ft=php
?>
