<?php
require_once 'vendor' . DIRECTORY_SEPARATOR . 'autoload.php';

/**
 * Get build directories
 * 
 * Build directories will be removed and recreated during
 * the build:clean task.
 * 
 * @return array
 */
function getBuildDirs() {
	$result = array(
		'build/coverage',
		'build/logs',
		'build/pdepend',
	);

	return $result;
}

/**
 * Get all test and build commands
 * 
 * @return array
 */
function getBuildCommands() {
	$result = array(
		'phpunit' => './vendor/bin/phpunit',
		'phpcs' => './vendor/bin/phpcs -n -p --extensions=php --standard=PSR2 src/ tests/',
		'phpcs-ci' => './vendor/bin/phpcs -n -p --extensions=php --standard=PSR2 src/ tests/ --report=checkstyle --report-file=build/logs/checkstyle.xml',
		'pdepend' => './vendor/bin/pdepend --jdepend-xml=build/logs/jdepend.xml --jdepend-chart=build/pdepend/dependecies.svg --overview-pyramid=build/pdepend/overview-pyramid.svg src/',
		'phploc' => './vendor/bin/phploc --count-tests --log-csv build/logs/phploc.csv --log-xml build/logs/phploc.xml src/ tests/',
		'phpmd' => './vendor/bin/phpmd src/ xml codesize,controversial,naming,unusedcode --reportfile build/logs/phpmd.xml',
		'phpcpd' => './vendor/bin/phpcpd --log-pmd=build/logs/phpcpd.xml src/',
	);

	return $result;
}

// Build related tasks
group(
	'build', function() {
		desc('All build tasks');
		task(
			'all', ':builder:init', function ($app) {
				printSeparator();
				printInfo("Build tasks");

				$commands = getBuildCommands();

				$failedCommands = array();
				foreach ($commands as $name => $command) {
					try {
						doShellCommand($command);
					}
					catch (\Exception $e) {
						$failedCommands[$name] = $e->getMessage();
					}
				}

				if (!empty($failedCommands)) {
					throw new \RuntimeException("The following failures occured during execution: \n" . print_r($failedCommands, true));
				}
			}
		);
		task('all', 'build:clean');
		task('all', 'sami:update');

		desc('Clean');
		task(
			'clean', ':builder:init', function ($app) {
				printSeparator();
				printInfo("Clean");

				$dirs = getBuildDirs();
				foreach ($dirs as $dir) {
					\PhakeBuilder\FileSystem::removePath($dir);
					\PhakeBuilder\FileSystem::makeDir($dir);
				}
			}
		);
		
		desc('PHPUnit');
		task(
			'phpunit', ':builder:init', function ($app) {
				printSeparator();
				printInfo("PHPUnit");

				$commands = getBuildCommands();
				if (!empty($commands['phpunit'])) {
					doShellCommand($commands['phpunit']);
				}
			}
		);

		desc('CodeSniffer');
		task(
			'phpcs', ':builder:init', function ($app) {
				printSeparator();
				printInfo("CodeSniffer");

				$commands = getBuildCommands();
				if (!empty($commands['phpcs-ci'])) {
					try {
						// This time for the build/logs/checkstyle.xml
						doShellCommand($commands['phpcs-ci']);
					}
					catch (\Exception $e) {
					}

				}
				// This time for the developer and human-friendly output
				if (!empty($commands['phpcs'])) {
					doShellCommand($commands['phpcs']);
				}
			}
		);

		desc('PDepend');
		task(
			'pdepend', ':builder:init', function ($app) {
				printSeparator();
				printInfo('PDepend');

				$commands = getBuildCommands();
				if (!empty($commands['pdepend'])) {
					doShellCommand($commands['pdepend']);
				}
			}
		);

		desc('PHPLoc');
		task(
			'phploc', ':builder:init', function ($app) {
				printSeparator();
				printInfo('PHPLoc');

				$commands = getBuildCommands();
				if (!empty($commands['phploc'])) {
					doShellCommand($commands['phploc']);
				}
			}
		);

		desc('PHPMD');
		task(
			'phpmd', ':builder:init', function($app) {
				printSeparator();
				printInfo('PHPMD');

				$commands = getBuildCommands();
				if (!empty($commands['phpmd'])) {
					doShellCommand($commands['phpmd']);
				}
			}
		);

		desc('PHPCPD');
		task(
			'phpcpd', ':builder:init', function($app) {
				printSeparator();
				printInfo('PHPCPD');

				$commands = getBuildCommands();
				if (!empty($commands['phpcpd'])) {
					doShellCommand($commands['phpcpd']);
				}
			}
		);

	}
);

// vi:ft=php
